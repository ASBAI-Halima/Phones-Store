{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hasbai\\\\Desktop\\\\Personnel\\\\project github\\\\phones-store\\\\src\\\\context\\\\ProductsContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer, useEffect, useState } from 'react';\nimport ProductsReducer from './ProductsReducer';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:3000/products';\nconst API_URL_reviews = 'http://localhost:3000/reviews';\nconst API_URL_cart = 'http://localhost:3000/cart';\nconst initialState = {\n  products: [],\n  reviews: [],\n  productsAddedToCart: [],\n  loading: true,\n  error: null\n};\nexport const ProductsContext = /*#__PURE__*/createContext(initialState);\nexport const ProductsProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(ProductsReducer, initialState);\n  const [products, setProducts] = useState([]);\n  const [reviews, setReviews] = useState([]);\n  const [productsAddedToCart, setProductsAddedToCart] = useState([]);\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        const response = await fetch(API_URL);\n        const data = await response.json();\n        setProducts(data);\n        dispatch({\n          type: 'FETCH_PRODUCTS',\n          payload: products\n        });\n        const response_reviews = await fetch(API_URL_reviews);\n        const data_reviews = await response_reviews.json();\n        setReviews(data_reviews);\n        dispatch({\n          type: 'FETCH_REVIEWS',\n          payload: reviews\n        });\n        const response_cart = await fetch(API_URL_cart);\n        const data_cart = await response_cart.json();\n        setProductsAddedToCart(data_cart);\n      } catch (error) {\n        dispatch({\n          type: 'SET_ERROR',\n          payload: error.message\n        });\n        console.log('erreur: ' + error);\n      }\n    };\n    fetchProducts();\n  }, []);\n  const addToCart = async productId => {\n    try {\n      // get the product to add to cart\n      const product = products.find(p => p.id === productId);\n      // creat a new product to add to cart\n      const item = {\n        id: product.id,\n        title: product.title,\n        image: product.image,\n        price: product.price,\n        category: product.category,\n        quantity: 1\n      };\n      // Send a POST request to the server to add the item to the cart\n      const response = await fetch(API_URL_cart, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(item)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add item to cart');\n      }\n      // Add the item to the local state\n      setProductsAddedToCart([...productsAddedToCart, item]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const removeFromCart = async itemId => {\n    try {\n      // Send a DELETE request to the server to remove the item from the cart\n      const response = await fetch(`${API_URL_cart}/${itemId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to remove item from cart');\n      }\n      // Update the local state by removing the item from the array\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const increaseQuantity = async itemId => {\n    try {\n      // Send a PATCH request to the server to update the quantity of the item in the cart\n      const itemToUpdate = productsAddedToCart.find(item => item.id === itemId);\n      const updatedItem = {\n        ...itemToUpdate,\n        quantity: itemToUpdate.quantity + 1\n      };\n      const response = await fetch(`${API_URL_cart}/${itemId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedItem)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update item quantity in cart');\n      }\n      // Update the local state by finding the item in the array and replacing it with the updated item\n      const updatedCart = productsAddedToCart.map(item => item.id === itemId ? updatedItem : item);\n      setProductsAddedToCart(updatedCart);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const decreaseQuantity = async itemId => {\n    try {\n      // Send a PATCH request to the server to update the quantity of the item in the cart\n      const itemToUpdate = productsAddedToCart.find(item => item.id === itemId);\n      if (itemToUpdate.quantity === 1) {\n        // If the quantity is already 1, remove the item from the cart instead\n        await removeFromCart(itemId);\n        return;\n      }\n      const updatedItem = {\n        ...itemToUpdate,\n        quantity: itemToUpdate.quantity - 1\n      };\n      const response = await fetch(`${API_URL_cart}/${itemId}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedItem)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update product quantity in cart');\n      }\n      // Update the local state by finding the item in the array and replacing it with the updated item\n      const updatedCart = productsAddedToCart.map(item => item.id === itemId ? updatedItem : item);\n      setProductsAddedToCart(updatedCart);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const getProductById = async itemId => {\n    try {\n      const response = await fetch(`${API_URL}/${itemId}`);\n      if (!response.ok) {\n        throw new Error('Failed to get product');\n      }\n      const product = await response.json();\n      return product;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  if (!products) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  if (!reviews) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  return /*#__PURE__*/_jsxDEV(ProductsContext.Provider, {\n    value: {\n      products: products,\n      reviews: reviews,\n      productsAddedToCart: productsAddedToCart,\n      loading: state.loading,\n      error: state.error,\n      addToCart: addToCart,\n      removeFromCart: removeFromCart,\n      increaseQuantity,\n      decreaseQuantity,\n      getProductById: getProductById\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 9\n  }, this);\n};\n_s(ProductsProvider, \"KjYCW1gAvRbGJLAD/xZctM1Nkrs=\");\n_c = ProductsProvider;\nvar _c;\n$RefreshReg$(_c, \"ProductsProvider\");","map":{"version":3,"names":["createContext","useReducer","useEffect","useState","ProductsReducer","Fragment","_Fragment","jsxDEV","_jsxDEV","API_URL","API_URL_reviews","API_URL_cart","initialState","products","reviews","productsAddedToCart","loading","error","ProductsContext","ProductsProvider","children","_s","state","dispatch","setProducts","setReviews","setProductsAddedToCart","fetchProducts","response","fetch","data","json","type","payload","response_reviews","data_reviews","response_cart","data_cart","message","console","log","addToCart","productId","product","find","p","id","item","title","image","price","category","quantity","method","headers","body","JSON","stringify","ok","Error","removeFromCart","itemId","increaseQuantity","itemToUpdate","updatedItem","updatedCart","map","decreaseQuantity","getProductById","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hasbai/Desktop/Personnel/project github/phones-store/src/context/ProductsContext.jsx"],"sourcesContent":["import {createContext , useReducer , useEffect, useState} from 'react';\nimport ProductsReducer from './ProductsReducer';\nconst API_URL = 'http://localhost:3000/products';\nconst API_URL_reviews = 'http://localhost:3000/reviews';\nconst API_URL_cart = 'http://localhost:3000/cart';\n\nconst initialState = {\n  products: [],\n  reviews: [],\n  productsAddedToCart:[],\n  loading: true ,\n  error: null\n}\nexport const ProductsContext = createContext(initialState);\n\nexport const ProductsProvider = ({ children}) =>{\n    const [state, dispatch] = useReducer(ProductsReducer, initialState);\n    const [products , setProducts] = useState([]);\n    const [reviews , setReviews] = useState([]);\n    const [productsAddedToCart , setProductsAddedToCart] = useState([]);\n\n    useEffect(()=>{\n        const fetchProducts = async ()=>{\n            try{\n                const response = await fetch(API_URL);\n                const data = await response.json();\n                setProducts(data);\n                dispatch({\n                  type: 'FETCH_PRODUCTS',\n                  payload: products,\n              });\n                const response_reviews = await fetch(API_URL_reviews);\n                const data_reviews = await response_reviews.json();\n                \n                setReviews(data_reviews);\n                \n                dispatch({\n                  type: 'FETCH_REVIEWS',\n                  payload: reviews,\n              });\n              const response_cart = await fetch(API_URL_cart);\n              const data_cart = await response_cart.json();\n              setProductsAddedToCart(data_cart)\n\n            }catch(error){\n                dispatch({\n                    type: 'SET_ERROR',\n                    payload: error.message,\n                  });\n                  console.log('erreur: '+error);\n            }\n        };\n        fetchProducts();\n      },[]);\n        const addToCart  = async (productId)=>{\n          try {\n            // get the product to add to cart\n            const product = products.find((p)=> p.id === productId);\n            // creat a new product to add to cart\n            const item ={\n                id: product.id,\n                title: product.title,\n                image : product.image,\n              price: product.price,\n              category : product.category,\n              quantity: 1,\n            };\n            // Send a POST request to the server to add the item to the cart\n              const response = await fetch(API_URL_cart,{\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(item),\n              });\n              if (!response.ok) {\n                throw new Error('Failed to add item to cart');\n              }\n              // Add the item to the local state\n            setProductsAddedToCart([...productsAddedToCart, item]);\n            \n\n\n          } catch(error){\n            console.log(error);\n          }\n        };\n        const removeFromCart = async (itemId) => {\n          try {\n            // Send a DELETE request to the server to remove the item from the cart\n            const response = await fetch(`${API_URL_cart}/${itemId}`, {\n              method: 'DELETE',\n            });\n            if (!response.ok) {\n              throw new Error('Failed to remove item from cart');\n            }\n            // Update the local state by removing the item from the array\n          } catch (error) {\n            console.log(error);\n          }\n        };\n        const increaseQuantity = async (itemId) => {\n          try {\n            // Send a PATCH request to the server to update the quantity of the item in the cart\n            const itemToUpdate = productsAddedToCart.find((item) => item.id === itemId);\n            const updatedItem = {\n              ...itemToUpdate,\n              quantity: itemToUpdate.quantity + 1,\n            };\n            const response = await fetch(`${API_URL_cart}/${itemId}`, {\n              method: 'PATCH',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify(updatedItem),\n            });\n            if (!response.ok) {\n              throw new Error('Failed to update item quantity in cart');\n            }\n            // Update the local state by finding the item in the array and replacing it with the updated item\n            const updatedCart = productsAddedToCart.map((item) =>\n              item.id === itemId ? updatedItem : item\n            );\n            setProductsAddedToCart(updatedCart);\n          } catch (error) {\n            console.log(error);\n          }\n        };\n        const decreaseQuantity = async (itemId) => {\n          try {\n            // Send a PATCH request to the server to update the quantity of the item in the cart\n            const itemToUpdate = productsAddedToCart.find((item) => item.id === itemId);\n            if (itemToUpdate.quantity === 1) {\n              // If the quantity is already 1, remove the item from the cart instead\n              await removeFromCart(itemId);\n              return;\n            }\n            const updatedItem = {\n              ...itemToUpdate,\n              quantity: itemToUpdate.quantity - 1,\n            };\n            const response = await fetch(`${API_URL_cart}/${itemId}`, {\n              method: 'PATCH',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify(updatedItem),\n            });\n            if (!response.ok) {\n              throw new Error('Failed to update product quantity in cart');\n            }\n            // Update the local state by finding the item in the array and replacing it with the updated item\n            const updatedCart = productsAddedToCart.map((item) =>\n              item.id === itemId ? updatedItem : item\n            );\n            setProductsAddedToCart(updatedCart);\n          } catch (error) {\n            console.log(error);\n          }\n        };\n        const getProductById = async  (itemId)=>{\n          try {\n            const response = await fetch(`${API_URL}/${itemId}`);\n            if (!response.ok) {\n              throw new Error('Failed to get product');\n            }\n            const product = await response.json();\n            return product;\n          } catch (error) {\n            console.log(error);\n          }\n        }\n \n\n    if(!products) return <></>;\n    if(!reviews) return <></>;\n    \n    return (\n        <ProductsContext.Provider\n          value={{\n            products: products,\n            reviews : reviews,\n            productsAddedToCart:productsAddedToCart,\n            loading: state.loading,\n            error: state.error,\n            addToCart: addToCart,\n            removeFromCart: removeFromCart,\n            increaseQuantity,\n            decreaseQuantity,\n            getProductById:getProductById\n             \n             \n          }}\n        >\n          {children}\n        </ProductsContext.Provider>\n      );\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}